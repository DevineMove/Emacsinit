* Interface Tweaks

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode) 
  (setq inhibit-splash-screen t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (load-theme 'tango-dark)
  (electric-pair-mode t)
  (auto-fill-mode t)
  (setq beacon-push-mark 35)
  (setq beacon-color "#666600")
#+end_src

* Global-set-key

** Open Myinit file 
 #+begin_src emacs-lisp
   (defun open-init-file()
     (interactive)
     (find-file "C:/Emacs/.emacs.d/myinit.org"))
   (global-set-key (kbd "C-x C-\\") 'open-init-file)

 #+end_src

** Open StAlbans Log
#+BEGIN_SRC emacs-lisp
  (defun open-work-file()
    (interactive)
    (find-file "c:/Emacs/.emacs.d/StAlbans.org"))

  (global-set-key (kbd "C-x C-]") 'open-work-file)
  

#+END_SRC

* Package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package try
    :ensure t)

  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)

  (defalias 'list-buffers 'ibuffer)

  (winner-mode t)
  (use-package ace-window
    :ensure t
    :config
    (progn
      (global-set-key [remap other-window] 'ace-window)
      ))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
	  (global-set-key "\C-s" 'swiper)
	  (global-set-key (kbd "C-c g") 'counsel-git)
	  (global-set-key (kbd "C-c j") 'counsel-git-grep)
	  (global-set-key (kbd "C-c k") 'counsel-ag)
	  (global-set-key (kbd "C-x l") 'counsel-locate)
	  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	  )
    )


  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  (use-package company)
  (global-company-mode t)

  (use-package esup
    :ensure t
    :pin melpa
    :commands (esup))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode ))

#+END_SRC

* Python
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+end_src

** Elpy
#+begin_src emacs-lisp  
   (use-package elpy
      :ensure t
      :init
    (add-hook 'python-mode-hook #'elpy-enable))
#+end_src             

** Company-Jedi
#+BEGIN_SRC emacs-lisp
  (defun my/python-mode-hook()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode t))

#+END_SRC

* test 
